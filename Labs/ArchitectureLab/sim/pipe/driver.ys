#######################################################################
# Test for copying block of size 2;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $2, %rdx		# src and dst have 2 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
# zh18779 Zach Halvorsen

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
  # Loop header
  xorq %rax,%rax    # count = 0;
  andq %rdx, %rdx
  jle Done
  iaddq $-4, %rdx       # len = len - 4
  jl Tail

Loop:
  mrmovq (%rbx), %rsi   # read val from src
  mrmovq 8(%rbx), %rdi  # read val from src +4
  rmmovq %rsi, (%rcx)   # store src[0] to dest[0]
  andq %rsi, %rsi       # src[0] > 0
  jle Pos1              # yes ? goto pos1:
  iaddq $1, %rax        # count++

Pos1:
  rmmovq %rdi, 8(%rcx)  # store src[1] in dest[1]
  andq %rdi, %rdi       # src[1] > 0
  jle Pos2              # No ? get the next element
  iaddq $1, %rax        # count++

Pos2:
  mrmovq 16(%rbx), %rsi    # read val from src +8
  mrmovq 24(%rbx), %rdi   # read val from src +12
  rmmovq %rsi, 8(%rcx)    # store src[2] in dest[2]
  andq %rsi, %rsi         # src[2] > 0
  jle Pos3                # No ? get the next element
  iaddq $1, %rax          # count++

Pos3:
  rmmovq %rdi, 24(%rcx)   # store src[3] in dest[3]
  andq %rdi, %rdi         # src[3] > 0
  jle Next                # No ? get the next element
  iaddq $1, %rax          # count++

Next:
  iaddq $16 , %rbx      # goto next four positions of src
  iaddq $16 , %rcx      # goto next four positions of dest
  iaddq $-4, %rdx       # len = len - 4
  jge Loop              # if four left, do again

Tail:
  iaddq $4, %rdx        # get actual len

Extra1:
  iaddq $-1 , %rdx
  jl Done                # Done
  mrmovq (%rbx), %rsi    # Take care of extras here
  mrmovq 8(%rbx), %rdi
  rmmovq %rsi, (%rcx)
  andq %rsi, %rsi
  jle Extra2
  iaddq $1, %rax

Extra2:
  iaddq $-1 , %rdx
  jl Done
  rmmovq %rdi, 8(%rcx)
  andq %rdi, %rdi
  jle Extra3
  iaddq $1, %rax

Extra3:
  iaddq $-1 , %rdx
  jl Done
  mrmovq 16(%rbx), %rsi
  rmmovq %rsi, 16(%rcx)
  andq %rsi, %rsi
  jle Done
  iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 2.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $2,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $2,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
